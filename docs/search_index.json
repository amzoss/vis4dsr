[["index.html", "Visualization for Data Science with R Proposal Why read this book Structure of the book Software information and conventions", " Visualization for Data Science with R Angela M. Zoss, Ph.D. 2021-08-15 Proposal Note: This book is a work in progress, with a full draft expected in April of 2022. This book combines instruction on writing R code with building basic graphic design skills in a way that is unusual in data science literature. The book will guide readers through a series of projects, each designed to cover both how visualizations work in R and how visualizations can be designed to have the greatest impact. Far more than a “do this, then this” checklist, this book will focus on building understanding, confidence, and the ability to transfer skills to other tools and design contexts. It will avoid technical jargon that our target audience is unlikely to have encountered before. To accommodate learners who don’t have time to work through an entire book, each chapter will operate independently, covering a specific set of tasks that all make sense together as part of a visualization project. For those who would like extra practice, there will be several types of hands-on exercises, from those that are entirely prescribed to those that allow readers to apply new techniques to problems in their own areas. The book will have solutions (in the form of completed code and sample output) for all exercises. While not a textbook, the book will also include a brief teacher’s guide for courses that might want to use one or more chapters to structure lessons in a course. The book will also have a website, including links to Open Access content, solutions, and related resources like video tutorials. The target audience of this book would be professionals who are having to learn data science techniques on the job, likely at an under-resourced organization or company. These newly minted data professionals may feel comfortable in Excel but have only just started to learn R for processing data. They have never used a programming language to build a visualization before, and even creating charts in Excel has often been a frustrating and mystifying process. They appreciate that R is freely available and are able to get started on a data science project, but the idea of creating publication-quality visualizations using only code is daunting. Increasingly, programs of study with a focus on preparing students for professional careers in under-resourced fields, like public policy and even management, include courses on data analysis and communication using freely available software. This book, while not a textbook, could easily be used for a semester-long course, titled something like “Practical data visualization for the modern workforce.” A chapter could be covered each week, and larger projects could help learners synthesize chapters into a complete set of analyses and communication materials. Why read this book This book will be: Written for non-academics, beginning programmers Each chapter stands alone Covers pressing modern issues, like accessibility and ethics Focuses on freely available software Combines hands-on exercises with basic graphic design principles Structure of the book Chapter 1: Overview of common visualizations and how to read them Chapter 2: Building basic visualizations with ggplot2 Chapter 3: Working with textual data in ggplot2 Chapter 4: Customizing the design of ggplot2 visualizations Chapter 5: Avoiding unethical design practices Chapter 6: Building ggplot2 visualizations into print publications Chapter 7: Basic accessibility for static visualizations Chapter 8: Exploring interactivity in visualizations with plotly and crosstalk Chapter 9: Using RMarkdown to build websites for projects Chapter 10: Using RMarkdown to build dashboards for projects Chapter 11: Basic usability for interactive visualizations Chapter 12: Teacher’s guide Software information and conventions I used the knitr package (Xie 2015) and the bookdown package (Xie 2021) to compile my book. My R session information is shown below: xfun::session_info() ## R version 4.1.0 (2021-05-18) ## Platform: x86_64-apple-darwin17.0 (64-bit) ## Running under: macOS Big Sur 10.16 ## ## Locale: en_US.UTF-8 / en_US.UTF-8 / en_US.UTF-8 / C / en_US.UTF-8 / en_US.UTF-8 ## ## Package version: ## base64enc_0.1.3 bookdown_0.23 ## bslib_0.2.5.1 compiler_4.1.0 ## digest_0.6.27 evaluate_0.14 ## fs_1.5.0 glue_1.4.2 ## graphics_4.1.0 grDevices_4.1.0 ## highr_0.9 htmltools_0.5.1.1 ## jquerylib_0.1.4 jsonlite_1.7.2 ## knitr_1.33 magrittr_2.0.1 ## markdown_1.1 methods_4.1.0 ## mime_0.11 R6_2.5.0 ## rappdirs_0.3.3 rlang_0.4.11 ## rmarkdown_2.10 rstudioapi_0.13 ## sass_0.4.0 stats_4.1.0 ## stringi_1.7.3 stringr_1.4.0 ## tinytex_0.33 tools_4.1.0 ## utils_4.1.0 xfun_0.25 ## yaml_2.2.1 Package names are in bold text (e.g., rmarkdown), and inline code and filenames are formatted in a typewriter font (e.g., knitr::knit('foo.Rmd')). Function names are followed by parentheses (e.g., bookdown::render_book()). Angela Zoss References "],["about-the-author.html", "About the Author", " About the Author FIGURE 0.1: Angela M. Zoss, Ph.D. Angela is the Assessment &amp; Data Visualization Analyst in the Assessment &amp; User Experience Department in the Duke University Libraries. She has many years of experience in teaching and training, predominantly focusing on teaching data visualization to university students, faculty, and staff. She is also active in several open source development projects, including FOLIO and Wax. "],["reading-visualizations.html", "Chapter 1 Overview of common visualizations and how to read them 1.1 Bar Chart 1.2 Scatter Plot 1.3 Line Chart 1.4 Pie Chart 1.5 Heat Map 1.6 Histogram 1.7 Box Plot 1.8 Maps 1.9 Movies", " Chapter 1 Overview of common visualizations and how to read them inclusiveness_index_annual %&gt;% drop_na(Inclusiveness.index) %&gt;% ggplot(aes(x = Year, y = Inclusiveness.index, color = Continent)) + geom_jitter() 1.1 Bar Chart bar chart / stacked bar / dot plot / dumbbell plot inclusiveness_index_annual %&gt;% drop_na(Inclusiveness.index) %&gt;% group_by(Continent) %&gt;% summarize(mean_incl_ind = mean(Inclusiveness.index, na.rm = TRUE)) %&gt;% mutate(Continent = Continent %&gt;% as_factor() %&gt;% fct_reorder(mean_incl_ind, .desc = TRUE)) %&gt;% ggplot(mapping = aes(x = Continent, y = mean_incl_ind)) + geom_col() 1.2 Scatter Plot scatter plot / scatter plot with color / bubble chart / countour plot inclusiveness_index %&gt;% drop_na(Z.score.Religion, Inclusiveness.index.2020) %&gt;% ggplot(aes(x = Z.score.Religion, y = Inclusiveness.index.2020)) + geom_point() 1.3 Line Chart line chart / area chart inclusiveness_index_annual %&gt;% group_by(Year, Continent) %&gt;% summarise(mean_incl_ind = mean(Inclusiveness.index, na.rm = TRUE)) %&gt;% dplyr::filter(Continent == &quot;Europe&quot;) %&gt;% ggplot(aes(x = Year, y = mean_incl_ind)) + geom_line() ## `summarise()` has grouped output by &#39;Year&#39;. You can override using the `.groups` argument. inclusiveness_index_annual %&gt;% group_by(Year, Continent) %&gt;% summarise(mean_incl_ind = mean(Inclusiveness.index, na.rm = TRUE)) %&gt;% ggplot(aes(x = Year, y = mean_incl_ind, color = Continent)) + geom_line() ## `summarise()` has grouped output by &#39;Year&#39;. You can override using the `.groups` argument. 1.4 Pie Chart pie chart / donut chart # library(RColorBrewer) # brewer.pal(5, &quot;Blues&quot;) inclusiveness_index %&gt;% #dplyr::filter(Continent == &quot;Americas&quot;) %&gt;% ggplot(aes(y = &quot;&quot;, fill = Index.categories.2020)) + geom_bar(position=position_fill()) + coord_polar(direction = -1) + #scale_fill_brewer(type=&quot;seq&quot;, palette = 1, direction = -1) + scale_fill_manual(values = c(&quot;#08519C&quot;,&quot;#3182BD&quot;,&quot;#6BAED6&quot;,&quot;#9ECAE1&quot;,&quot;#C6DBEF&quot;,&quot;#EEEEEE&quot;)) + theme_void() + facet_wrap(vars(Continent)) 1.5 Heat Map heat map / matrix / circles with color and size inclusiveness_index %&gt;% pivot_longer(cols = c(Inclusiveness.index.2020, starts_with(&quot;Z&quot;)), names_to = &quot;index_name&quot;, values_to = &quot;index_values&quot;, values_drop_na = TRUE) %&gt;% group_by(Index.categories.2020, index_name) %&gt;% summarise(mean_incl_ind = mean(index_values)) %&gt;% mutate(index_name = index_name %&gt;% as_factor() %&gt;% fct_relevel(c(&quot;Z.score.General.Population&quot;, &quot;Z.score.Race&quot;, &quot;Z.score.Gender&quot;, &quot;Z.score.Sexual.Orientation&quot;, &quot;Z.score.Religion&quot;, &quot;Z.score.Disability&quot;, &quot;Inclusiveness.index.2020&quot;)) %&gt;% fct_rev()) %&gt;% #View() %&gt;% ggplot(aes(y = index_name, x = Index.categories.2020, fill = mean_incl_ind)) + geom_tile() + scale_fill_distiller(type=&quot;div&quot;, palette = 3, limits=c(-1.2,1.2), direction = -1) + theme_bw() ## `summarise()` has grouped output by &#39;Index.categories.2020&#39;. You can override using the `.groups` argument. ## Warning: Unknown levels in `f`: ## Inclusiveness.index.2020 1.6 Histogram histogram / density inclusiveness_index %&gt;% drop_na(Inclusiveness.index.2020) %&gt;% ggplot(aes(x = Inclusiveness.index.2020)) + geom_histogram() ## `stat_bin()` using `bins = 30`. Pick better value ## with `binwidth`. 1.7 Box Plot box plot / violin plot / bee swarm ggplot(inclusiveness_index, aes(group = Z.score.Disability, y = Inclusiveness.index.2020)) + geom_boxplot() ## Warning: Removed 113 rows containing non-finite values ## (stat_boxplot). 1.8 Maps choropleth / proportional symbol map map_incl_ind &lt;- inclusiveness_index %&gt;% mutate(Country = case_when( Country == &quot;Antigua and Barbuda&quot; ~ &quot;Antigua&quot;, Country == &quot;Bonaire, Saint Eustatius and Saba&quot; ~ &quot;Bonaire&quot;, Country == &quot;Cote d&#39;Ivoire&quot; ~ &quot;Ivory Coast&quot;, Country == &quot;East Timor&quot; ~ &quot;Timor-Leste&quot;, Country == &quot;Palestina&quot; ~ &quot;Palestine&quot;, Country == &quot;Saint Kitts and Nevis&quot; ~ &quot;Saint Kitts&quot;, Country == &quot;Saint Vincent and the Grenadines&quot; ~ &quot;Saint Vincent&quot;, Country == &quot;Saint-Barthalemy&quot; ~ &quot;Saint Barthelemy&quot;, Country == &quot;Saint-Martin&quot; ~ &quot;Saint Martin&quot;, Country == &quot;Trinidad and Tobago&quot; ~ &quot;Trinidad&quot;, Country == &quot;United Kingdom&quot; ~ &quot;UK&quot;, Country == &quot;United States&quot; ~ &quot;USA&quot;, Country == &quot;Vatican City&quot; ~ &quot;Vatican&quot;, TRUE ~ Country )) %&gt;% bind_rows( inclusiveness_index %&gt;% dplyr::filter( Country %in% c(&quot;Antigua and Barbuda&quot;, &quot;Bonaire, Saint Eustatius and Saba&quot;, &quot;Saint Kitts and Nevis&quot;, &quot;Saint Vincent and the Grenadines&quot;, &quot;Trinidad and Tobago&quot;) ) %&gt;% mutate(Country = case_when( Country == &quot;Antigua and Barbuda&quot; ~ &quot;Barbuda&quot;, Country == &quot;Bonaire, Saint Eustatius and Saba&quot; ~ &quot;Sint Eustatius&quot;, Country == &quot;Saint Kitts and Nevis&quot; ~ &quot;Nevis&quot;, Country == &quot;Saint Vincent and the Grenadines&quot; ~ &quot;Grenadines&quot;, Country == &quot;Trinidad and Tobago&quot; ~ &quot;Tobago&quot;, TRUE ~ Country ) ), inclusiveness_index %&gt;% dplyr::filter( Country %in% c(&quot;Bonaire, Saint Eustatius and Saba&quot;) ) %&gt;% mutate(Country = case_when( Country == &quot;Bonaire, Saint Eustatius and Saba&quot; ~ &quot;Saba&quot;, TRUE ~ Country ) ) ) map_incl_ind %&gt;% left_join(map_data(&quot;world2&quot;), by = c(&quot;Country&quot; = &quot;region&quot;)) %&gt;% ggplot() + geom_polygon(aes(x = long, y = lat, group=group, fill=Inclusiveness.index.2020)) + coord_map() + scale_fill_distiller(type=&quot;div&quot;, palette = 3, limits=c(-1.2,1.2), direction = -1) map_incl_ind %&gt;% drop_na(Inclusiveness.index.2020) %&gt;% left_join( map_data(&quot;world2&quot;) %&gt;% group_by(region) %&gt;% summarise(x = mean(long), y = mean(lat)), by = c(&quot;Country&quot; = &quot;region&quot;)) %&gt;% ggplot() + geom_polygon( data = map_data(&quot;world2&quot;), aes(x = long, y = lat, group=group), fill = &quot;grey50&quot;, color = &quot;black&quot;) + coord_map() + geom_point(aes(x = x, y = y, fill = Index.categories.2020, size = Inclusiveness.index.2020), shape = 21, alpha = .75) + scale_fill_brewer(palette = &quot;YlGnBu&quot;, direction = -1) 1.9 Movies library(ggplot2movies) # add to index if you use this instead # Movies were selected for inclusion if they had a known length and had # been rated by at least one imdb user. movies &lt;- movies movies %&gt;% pivot_longer(cols = c(Action, Animation, Comedy, Drama, Documentary, Romance, Short), names_to = &quot;genre&quot;) %&gt;% mutate(value = as.logical(value)) %&gt;% dplyr::filter(value) %&gt;% mutate(genre = genre %&gt;% as_factor() %&gt;% fct_infreq) %&gt;% ggplot(aes(x=genre)) + geom_bar() ggplot(movies, aes(budget, rating)) + geom_point() ## Warning: Removed 53573 rows containing missing values ## (geom_point). movies %&gt;% group_by(year) %&gt;% summarise(mean_budget = mean(budget, na.rm=T)) %&gt;% ggplot(aes(x=year, y=mean_budget)) + geom_line() ## Warning: Removed 10 row(s) containing missing values ## (geom_path). movies %&gt;% pivot_longer(cols = c(Action, Animation, Comedy, Drama, Documentary, Romance, Short), names_to = &quot;genre&quot;) %&gt;% mutate(value = as.logical(value)) %&gt;% dplyr::filter(value) %&gt;% mutate(genre = genre %&gt;% as_factor() %&gt;% fct_infreq) %&gt;% ggplot(aes(y=&quot;&quot;, fill=genre)) + geom_bar(position = position_fill()) + coord_polar(direction = -1) movies %&gt;% pivot_longer(cols = c(Action, Animation, Comedy, Drama, Documentary, Romance, Short), names_to = &quot;genre&quot;) %&gt;% mutate(value = as.logical(value)) %&gt;% dplyr::filter(value, mpaa != &quot;&quot;) %&gt;% mutate(genre = genre %&gt;% as_factor() %&gt;% fct_infreq) %&gt;% group_by(mpaa, genre) %&gt;% summarize(n = n(), mean_budget = mean(budget, na.rm=T)) %&gt;% ggplot(aes(x=mpaa, y=genre, fill = mean_budget)) + geom_tile() ## `summarise()` has grouped output by &#39;mpaa&#39;. You can override using the `.groups` argument. ggplot(movies, aes(x=rating)) + geom_histogram() ## `stat_bin()` using `bins = 30`. Pick better value ## with `binwidth`. movies %&gt;% pivot_longer(cols = c(Action, Animation, Comedy, Drama, Documentary, Romance, Short), names_to = &quot;genre&quot;) %&gt;% mutate(value = as.logical(value)) %&gt;% dplyr::filter(value) %&gt;% mutate(genre = genre %&gt;% as_factor() %&gt;% fct_infreq) %&gt;% ggplot(aes(x=genre, y=rating)) + geom_boxplot() (No maps, but maybe that’s okay) "],["building-basic-visualizations.html", "Chapter 2 Building basic visualizations with ggplot2 2.1 Basic ggplot2 syntax", " Chapter 2 Building basic visualizations with ggplot2 2.1 Basic ggplot2 syntax # start with the main plot function and set the data frame ggplot(data = data_frame) + # next add a geometry layer and create the mapping between data frame and aesthetics geom_...(mapping = aes(...)) # to create the mapping, compose a list of aesthetics assignments # using the following format: # aesthetics = data_field "],["text-data-visualizations.html", "Chapter 3 Working with textual data in ggplot2", " Chapter 3 Working with textual data in ggplot2 sample text Cleaning data: use duke_enrollment (either by status or school) to talk about factors. Have Semester, which is really a time-based variable. Need to combine with Year to get the real sequence of enrollment. "],["customizing-visualization-design.html", "Chapter 4 Customizing the design of ggplot2 visualizations", " Chapter 4 Customizing the design of ggplot2 visualizations sample text We talk about the FOO method in this chapter. "],["ethical-design-practices.html", "Chapter 5 Avoiding unethical design practices", " Chapter 5 Avoiding unethical design practices sample text We talk about the FOO method in this chapter. "],["print-publications.html", "Chapter 6 Building ggplot2 visualizations into print publications", " Chapter 6 Building ggplot2 visualizations into print publications sample text We talk about the FOO method in this chapter. "],["accessibility-for-visualizations.html", "Chapter 7 Basic accessibility for static visualizations 7.1 Low Vision 7.2 Color Vision Deficiency 7.3 Alternative Text for Screen Readers 7.4 Converting graphics to sound, touch, text 7.5 Accessibility Resources", " Chapter 7 Basic accessibility for static visualizations 7.1 Low Vision Large text “output-examples” file High color contrast Both marks/text on background and labels on marks Check with savonliquide package 7.2 Color Vision Deficiency 7.2.1 Dual encoding (never just color) Line color – also vary line type Point color – also vary point shape https://www.youtube.com/watch?v=mbi_JVC1arM 7.2.2 Color palettes colorspace package 7.3 Alternative Text for Screen Readers In R, R Markdown: fig.alt in code chunk (new, just for HTML output) fig.cap in code chunk as backup embedded images: write alt text between square brackets New: ggplot2 v3.3.4 adds alt option in labs(), with plans to propagate to Rmd, Shiny Writing good alt text for visualizations Longer descriptions: savonliquide package 7.4 Converting graphics to sound, touch, text sonify package tactileR package BrailleR package Note: set plot title, subtitle, caption using labs() Accessible Data Science for the Blind Using R 7.5 Accessibility Resources savonliquide package Making betteR figures: Accessibility and Universal Design Highlights from the DVS accessibility fireside chat "],["interactive-visualizations.html", "Chapter 8 Exploring interactivity in visualizations with plotly and crosstalk", " Chapter 8 Exploring interactivity in visualizations with plotly and crosstalk sample text We talk about the FOO method in this chapter. "],["rmarkdown-websites.html", "Chapter 9 Using RMarkdown to build websites for projects", " Chapter 9 Using RMarkdown to build websites for projects sample text We talk about the FOO method in this chapter. "],["rmarkdown-dashboards.html", "Chapter 10 Using RMarkdown to build dashboards for projects", " Chapter 10 Using RMarkdown to build dashboards for projects sample text We talk about the FOO method in this chapter. "],["usability-for-visualizations.html", "Chapter 11 Basic usability for interactive visualizations", " Chapter 11 Basic usability for interactive visualizations sample text We talk about the FOO method in this chapter. "],["teachers-guide.html", "Chapter 12 Teacher’s guide", " Chapter 12 Teacher’s guide sample text We talk about the FOO method in this chapter. "],["datasets.html", "A Datasets Duke Enrollment A.1 Bar Chart Coral Resilience Data Git Experience Inclusiveness Index Candidate Demographics Affinity Spending", " A Datasets Duke Enrollment Duke enrollment Sample of Duke Enrollment By School dataset, Table A.1. TABLE A.1: A sample from the Duke Enrollment By School dataset. Year Semester Origin Region Sex School Count 1970 Fall Alabama United States Female Trinity 11 1970 Fall Alabama United States Female Graduate 7 1970 Fall Alabama United States Female Divinity 1 1970 Fall Alabama United States Female Law 1 1970 Fall Alaska United States Female Trinity 1 1970 Fall Alaska United States Female Graduate 1 A.1 Bar Chart Figure A.1. FIGURE A.1: Total Duke Enrollment by School Coral Resilience Data Protecting coral reefs Figure A.2. ## Warning: Removed 1 rows containing missing values ## (geom_point). FIGURE A.2: Log of tissue loss by snail density Git Experience A Behavioral Approach to Understanding the Git Experience # won&#39;t work without aggregation #ggplot(git_experience, aes(x=year_vcs)) + # geom_line() ggplot(git_experience %&gt;% count(year_vcs), aes(x=year_vcs, y=n)) + geom_line() ## Warning: Removed 1 row(s) containing missing values ## (geom_path). ggplot(git_experience %&gt;% count(year_vcs, first_vcs), aes(x=year_vcs, y=n, color=first_vcs)) + geom_line() ## Warning: Removed 3 row(s) containing missing values ## (geom_path). # First use vs. now use first_used &lt;- git_experience %&gt;% count(first_vcs) %&gt;% rename(&quot;n_first_used&quot; = &quot;n&quot;, &quot;system&quot; = &quot;first_vcs&quot;) now_use &lt;- git_experience %&gt;% pivot_longer(cols=c(first_bazaar,first_cvs,first_git, first_hg,first_monotone,first_svn, first_other), names_to = &quot;system&quot;) %&gt;% dplyr::filter(value == TRUE) %&gt;% count(system) %&gt;% rename(&quot;n_now_use&quot; = &quot;n&quot;) %&gt;% mutate(system = case_when( system == &quot;first_bazaar&quot; ~ &quot;Bazaar&quot;, system == &quot;first_cvs&quot; ~ &quot;CVS&quot;, system == &quot;first_git&quot; ~ &quot;Git&quot;, system == &quot;first_hg&quot; ~ &quot;Mercurial&quot;, system == &quot;first_monotone&quot; ~ &quot;Monotone&quot;, system == &quot;first_svn&quot; ~ &quot;SVN&quot;, system == &quot;first_other&quot; ~ &quot;Other&quot; )) combined &lt;- first_used %&gt;% left_join(now_use) %&gt;% pivot_longer(cols = c(n_first_used, n_now_use), names_to = &quot;time&quot;, values_to = &quot;count&quot;) %&gt;% drop_na() ## Joining, by = &quot;system&quot; ggplot(combined, aes(x=as_factor(time), y=count, group=system, color=system)) + geom_line() ggplot(git_experience, aes(x=first_vcs)) + geom_bar() ggplot(git_experience %&gt;% drop_na(first_vcs) %&gt;% mutate(first_vcs = as_factor(first_vcs) %&gt;% fct_infreq()), aes(x=first_vcs)) + geom_bar() #How difficult was it for you to learn how to use git on your local computer? # 1 - Very easy (1) # 2 - Easy (2) # 3 - Neutral (Neither easy nor difficult) (3) # 4 - Difficult (4) # 5 - Very difficult (5) ggplot(git_experience %&gt;% drop_na(local_ease) %&gt;% mutate(local_ease = as_factor(local_ease) %&gt;% fct_recode(&quot;Very easy&quot;=&quot;1&quot;, &quot;Easy&quot;=&quot;2&quot;, &quot;Neutral&quot;=&quot;3&quot;, &quot;Difficult&quot;=&quot;4&quot;, &quot;Very difficult&quot;=&quot;5&quot;)), aes(local_ease)) + geom_bar() #How difficult was it for you to learn how to use the git hosting platform (e.g. GitLab, GitHub, etc.)? # 1 - Very easy (1) # 2 - Easy (2) # 3 - Neutral (Neither easy nor difficult) (3) # 4 - Difficult (4) # 5 - Very difficult (5) ggplot(git_experience %&gt;% drop_na(ghp_ease) %&gt;% mutate(ghp_ease = as_factor(ghp_ease) %&gt;% fct_recode(&quot;Very easy&quot;=&quot;1&quot;, &quot;Easy&quot;=&quot;2&quot;, &quot;Neutral&quot;=&quot;3&quot;, &quot;Difficult&quot;=&quot;4&quot;, &quot;Very difficult&quot;=&quot;5&quot;)), aes(ghp_ease)) + geom_bar() # How proficient do you think you are with git? # 1 - Fundamental Awareness (basic knowledge) (1) # 2 - Novice (limited experience) (2) # 3 - Intermediate (practical application) (3) # 4 - Advanced (applied theory) (4) # 5 - Expert (recognized authority) (5) ggplot(git_experience %&gt;% drop_na(proficiency) %&gt;% mutate(proficiency = as_factor(proficiency) %&gt;% fct_recode(&quot;Basic Knowledge&quot;=&quot;1&quot;, &quot;Novice&quot;=&quot;2&quot;, &quot;Intermediate&quot;=&quot;3&quot;, &quot;Advanced&quot;=&quot;4&quot;, &quot;Expert&quot;=&quot;5&quot;)), aes(proficiency)) + geom_bar() # How frequently do you have to reteach yourself git? # Daily (1) # Weekly (2) # Once a semester (3) # Once a year (4) # Never (5) # Other: (6) ggplot(git_experience %&gt;% drop_na(freq_reteach) %&gt;% mutate(freq_reteach = as_factor(freq_reteach) %&gt;% fct_relevel(&quot;Daily&quot;, &quot;Weekly&quot;, &quot;Once a semester&quot;, &quot;Once a year&quot;, &quot;Never&quot;, &quot;Other:&quot;)), aes(freq_reteach)) + geom_bar() git_experience %&gt;% drop_na(first_vcs) %&gt;% group_by(first_vcs) %&gt;% summarise(count = n(), mean_prof = mean(proficiency, na.rm=TRUE)) %&gt;% ggplot(aes(x=first_vcs, y=mean_prof)) + geom_col() git_experience %&gt;% drop_na(first_vcs) %&gt;% group_by(first_vcs) %&gt;% summarise(count = n(), mean_proficiency = mean(proficiency, na.rm=TRUE)) %&gt;% mutate(first_vcs = as_factor(first_vcs) %&gt;% fct_reorder(mean_proficiency) %&gt;% fct_rev()) %&gt;% ggplot(aes(x=first_vcs, y=mean_proficiency)) + geom_col() ggplot(git_experience, aes(x=year_vcs, y=first_vcs)) + geom_count() ## Warning: Removed 15 rows containing non-finite values ## (stat_sum). git_experience %&gt;% drop_na(year_vcs, first_vcs) %&gt;% group_by(year_vcs, first_vcs) %&gt;% summarize(min_year = min(year_vcs), count=n()) %&gt;% mutate(first_vcs = as_factor(first_vcs) %&gt;% fct_reorder(min_year)) %&gt;% ggplot(aes(x=year_vcs, y=first_vcs, size=count)) + geom_point() ## `summarise()` has grouped output by &#39;year_vcs&#39;. You can override using the `.groups` argument. git_experience %&gt;% drop_na(first_vcs) %&gt;% mutate(first_vcs = as_factor(first_vcs) %&gt;% fct_reorder(year_vcs, .fun=min)) %&gt;% ggplot(aes(x=year_vcs, y=first_vcs)) + geom_count() ## Warning: Removed 9 rows containing non-finite values ## (stat_sum). ggplot(git_experience %&gt;% count(year_vcs, first_vcs), aes(x=year_vcs, y=first_vcs, size=n)) + geom_point() ## Warning: Removed 3 rows containing missing values ## (geom_point). ggplot(git_experience, aes(x=year_vcs, y=first_vcs)) + geom_point() ## Warning: Removed 15 rows containing missing values ## (geom_point). ggplot(git_experience, aes(x=year_vcs, y=first_vcs, color=first_vcs)) + geom_jitter() ## Warning: Removed 15 rows containing missing values ## (geom_point). ggplot(git_experience %&gt;% count(year_vcs, first_vcs), aes(x=year_vcs, y=first_vcs, fill=n)) + geom_tile() ## Warning: Removed 3 rows containing missing values ## (geom_tile). ggplot(git_experience %&gt;% drop_na(use_gitlab), aes(y=&quot;&quot;,fill=use_gitlab)) + geom_bar(position=position_fill()) + coord_polar() Inclusiveness Index Inclusiveness Index ggplot(inclusiveness_index, aes(x = Z.score.General.Population, y = Z.score.Gender, color = Continent)) + geom_point() + geom_smooth(method=&quot;lm&quot;, se=FALSE) + facet_wrap(vars(Continent)) ## `geom_smooth()` using formula &#39;y ~ x&#39; ## Warning: Removed 111 rows containing non-finite values ## (stat_smooth). ## Warning: Removed 111 rows containing missing values ## (geom_point). ggplot(inclusiveness_index, aes(x = Z.score.General.Population, y = Z.score.Sexual.Orientation)) + geom_point(aes(color = Continent)) + geom_smooth(method=&quot;lm&quot;, se=FALSE) ## `geom_smooth()` using formula &#39;y ~ x&#39; ## Warning: Removed 109 rows containing non-finite values ## (stat_smooth). ## Warning: Removed 109 rows containing missing values ## (geom_point). ggplot(inclusiveness_index, aes(x = Z.score.General.Population, y = Inclusiveness.index.2020)) + geom_point(aes(color = Continent)) + geom_smooth(method=&quot;lm&quot;, se=FALSE) ## `geom_smooth()` using formula &#39;y ~ x&#39; ## Warning: Removed 113 rows containing non-finite values ## (stat_smooth). ## Warning: Removed 113 rows containing missing values ## (geom_point). ggplot(inclusiveness_index, aes(x = Z.score.Gender, y = Z.score.Sexual.Orientation)) + geom_point(aes(color = Continent)) + geom_smooth(method=&quot;lm&quot;, se=FALSE) ## `geom_smooth()` using formula &#39;y ~ x&#39; ## Warning: Removed 90 rows containing non-finite values ## (stat_smooth). ## Warning: Removed 90 rows containing missing values ## (geom_point). ggplot(inclusiveness_index, aes(x = Z.score.Gender, y = Z.score.Religion)) + geom_point(aes(color = Continent)) + geom_smooth(method=&quot;lm&quot;, se=FALSE) ## `geom_smooth()` using formula &#39;y ~ x&#39; ## Warning: Removed 90 rows containing non-finite values ## (stat_smooth). ## Warning: Removed 90 rows containing missing values ## (geom_point). ggplot(inclusiveness_index, aes(x = Z.score.Gender, y = Inclusiveness.index.2020)) + geom_point(aes(color = Continent)) + geom_smooth(method=&quot;lm&quot;, se=FALSE) ## `geom_smooth()` using formula &#39;y ~ x&#39; ## Warning: Removed 113 rows containing non-finite values ## (stat_smooth). ## Warning: Removed 113 rows containing missing values ## (geom_point). ggplot(inclusiveness_index, aes(x = Z.score.Sexual.Orientation, y = Inclusiveness.index.2020)) + geom_point(aes(color = Continent)) + geom_text(data = inclusiveness_index %&gt;% dplyr::filter(Inclusiveness.index.2020 == max(Inclusiveness.index.2020, na.rm=TRUE) | Inclusiveness.index.2020 == min(Inclusiveness.index.2020, na.rm=TRUE)), aes(label = Country)) + geom_smooth(method=&quot;lm&quot;, se=FALSE) ## `geom_smooth()` using formula &#39;y ~ x&#39; ## Warning: Removed 113 rows containing non-finite values ## (stat_smooth). ## Warning: Removed 113 rows containing missing values ## (geom_point). ### USE THIS ONE? ### ggplot(inclusiveness_index, aes(x = Z.score.Religion, y = Inclusiveness.index.2020)) + geom_point(aes(color = Continent)) + geom_text(data = inclusiveness_index %&gt;% dplyr::filter(Inclusiveness.index.2020 == max(Inclusiveness.index.2020, na.rm=TRUE) | Inclusiveness.index.2020 == min(Inclusiveness.index.2020, na.rm=TRUE)), aes(label = Country)) + geom_smooth(method=&quot;lm&quot;, se=FALSE) ## `geom_smooth()` using formula &#39;y ~ x&#39; ## Warning: Removed 113 rows containing non-finite values ## (stat_smooth). ## Warning: Removed 113 rows containing missing values ## (geom_point). ggplot(inclusiveness_index, aes(group = Z.score.Disability, y = Inclusiveness.index.2020)) + geom_boxplot() ## Warning: Removed 113 rows containing non-finite values ## (stat_boxplot). Candidate Demographics Candidate Demographics Includes State, Candidate Name, Candidate Party, Office Name, White/Non-White, Race, Gender, Race/Gender Category, Office Level; 4 years (2012, 2014, 2016, 2018), over 40k records Affinity Spending Affinity Spending "],["references.html", "References", " References "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
